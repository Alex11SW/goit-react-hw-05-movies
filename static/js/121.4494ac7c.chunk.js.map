{"version":3,"file":"static/js/121.4494ac7c.chunk.js","mappings":"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","sources":["api/postmovie.js","webpack://goit-react-hw-05-movies/./src/components/SingleMovies/single-post.module.css?fab4","components/SingleMovies/SingleMovies.jsx","pages/Cast/Cast.jsx","pages/Reviews/Reviews.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_KEY = \"7fa1de4f202d6fd853924ceed0b441bf\";\r\nconst BASE_URL = \"https://api.themoviedb.org/3\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: BASE_URL,\r\n  params: {\r\n    api_key: API_KEY,\r\n    language: \"en-US\",\r\n  },\r\n});\r\n\r\nexport const getTrendingMovies = () => {\r\n  return instance.get(\"/trending/movie/day\");\r\n};\r\n\r\nexport const searchMovies = (query, page = 1) => {\r\n  return instance.get(\"/search/movie\", {\r\n    params: { query, page },\r\n  });\r\n};\r\n\r\nexport const getMovieDetails = (movieId) => {\r\n  return instance.get(`/movie/${movieId}`);\r\n};\r\nexport const getMovieCredits = (movieId) => {\r\n  return instance.get(`/movie/${movieId}/credits`);\r\n};\r\nexport const getMovieReviews = (movieId) => {\r\n  return instance.get(`/movie/${movieId}/reviews`);\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonback\":\"single-post_buttonback__7edE2\",\"divblock\":\"single-post_divblock__Gii3O\"};","import styles from \"./single-post.module.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { getMovieDetails } from \"../../api/postmovie\";\r\nimport { NavLink, useParams, useNavigate, useLocation } from \"react-router-dom\";\r\nimport Cast from \"../../pages/Cast/Cast\";\r\nimport Reviews from \"../../pages/Reviews/Reviews\";\r\n\r\nconst SingleMovies = () => {\r\n  const [movies, setMovies] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const { movieId } = useParams();\r\n  const [showCast, setShowCast] = useState(false);\r\n  const [showReviews, setShowReviews] = useState(false);\r\n  const location = useLocation();\r\n  const from = location.state.from || \"/home\";\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchMovies = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const { data } = await getMovieDetails(movieId);\r\n\r\n        setMovies(data);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchMovies();\r\n  }, [movieId]);\r\n\r\n  const handleCastClick = () => {\r\n    setShowCast(true);\r\n    setShowReviews(false);\r\n  };\r\n\r\n  const handleReviewsClick = () => {\r\n    setShowReviews(true);\r\n    setShowCast(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {loading && <p>Loading...</p>}\r\n      {error && <p>Error: {error}</p>}\r\n      {movies && (\r\n        <>\r\n          <div className={styles.divblock}>\r\n            <div>\r\n              <button\r\n                onClick={() => navigate(from)}\r\n                className={styles.buttonback}\r\n              >\r\n                Go back\r\n              </button>\r\n              <img\r\n                src={`https://image.tmdb.org/t/p/w500/${movies.poster_path}`}\r\n                alt={movies.title}\r\n              />\r\n            </div>\r\n            <div>\r\n              <h1 className={styles.singlepost}>{movies.title}</h1>\r\n              <p>User Score: {Math.floor(movies.popularity)}%</p>\r\n\r\n              <h3>Overview</h3>\r\n              <p>{movies.overview}</p>\r\n              <h4>Genres</h4>\r\n\r\n              <ul>\r\n                {movies.genres.map((genres) => (\r\n                  <li key={genres.id}>{genres.name}</li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <hr />\r\n            <h2> Information</h2>\r\n            <ul>\r\n              <li>\r\n                <NavLink to=\"cast\" state={{ from }} onClick={handleCastClick}>\r\n                  Cast\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink\r\n                  to=\"reviews\"\r\n                  state={{ from }}\r\n                  onClick={handleReviewsClick}\r\n                >\r\n                  Reviews\r\n                </NavLink>\r\n              </li>\r\n            </ul>\r\n            <hr />\r\n          </div>\r\n\r\n          {showCast && <Cast />}\r\n\r\n          {showReviews && <Reviews />}\r\n          {/* <Outlet /> */}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleMovies;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getMovieCredits } from \"../../api/postmovie\";\r\n\r\nconst Cast = () => {\r\n  const { movieId } = useParams();\r\n\r\n  const [cast, setCast] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchCast = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const { data } = await getMovieCredits(movieId);\r\n\r\n        setCast(data.cast);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCast();\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <h2>Cast</h2>\r\n\r\n        {loading && <p>Loading...</p>}\r\n        {error && <p>Error: {error}</p>}\r\n        {cast && (\r\n          <ul>\r\n            {cast.map((actor) => (\r\n              <li key={actor.id}>\r\n                <img\r\n                  src={`https://image.tmdb.org/t/p/w500/${actor.profile_path}`}\r\n                  alt={actor.name}\r\n                />\r\n                <p>{actor.name}</p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Cast;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getMovieReviews } from \"../../api/postmovie\";\r\n// import SingleMovies from \"../../components/SingleMovies/SingleMovies\";\r\n\r\nconst Reviews = () => {\r\n  const { movieId } = useParams();\r\n\r\n  const [reviews, setReviews] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchReviews = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const { data } = await getMovieReviews(movieId);\r\n\r\n        setReviews(data.results);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchReviews();\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <h2>Reviews</h2>\r\n\r\n        {loading && <p>Loading...</p>}\r\n        {error && <p>Error: {error}</p>}\r\n        {reviews && reviews.length === 0 ? (\r\n          <p>We don't have any reviews for this movie</p>\r\n        ) : (\r\n          <ul>\r\n            {reviews &&\r\n              reviews.map((review) => (\r\n                <li key={review.id}>\r\n                  <h2>Author: {review.author}</h2>\r\n                  <p>{review.content}</p>\r\n                </li>\r\n              ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Reviews;\r\n"],"names":["instance","axios","create","baseURL","params","api_key","language","getTrendingMovies","get","searchMovies","query","page","arguments","length","undefined","getMovieDetails","movieId","concat","getMovieCredits","getMovieReviews","SingleMovies","movies","setMovies","useState","loading","setLoading","error","setError","useParams","showCast","setShowCast","showReviews","setShowReviews","from","useLocation","state","navigate","useNavigate","useEffect","async","data","message","fetchMovies","_jsxs","children","_jsx","_Fragment","className","styles","divblock","onClick","buttonback","src","poster_path","alt","title","singlepost","Math","floor","popularity","overview","genres","map","name","id","NavLink","to","handleCastClick","handleReviewsClick","Cast","Reviews","cast","setCast","fetchCast","actor","profile_path","reviews","setReviews","results","fetchReviews","review","author","content"],"sourceRoot":""}